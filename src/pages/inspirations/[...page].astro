---
import type { Page, PaginateFunction } from "astro";
import { loadJson } from "../../../scripts/lib/loadJson";
import { INSPIRATIONS_JSON_PATH } from "../../../scripts/paths";
import {
  type InspirationType,
  inspirationSchema,
} from "../../schemas/inspirations";
import type { AstroGlobImageType } from "../../utils/astroTypes";
import InspirationGrid from "./_InspirationGrid.astro";

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction;
}) {
  const parsedInspirations = await getParsedInspirations();
  return paginate(parsedInspirations, {
    pageSize: 47,
  }).map((page) => ({
    ...page,
    props: {
      ...page.props,
      allInspirations: parsedInspirations,
    },
  }));
}

export async function getParsedInspirations(): Promise<InspirationType[]> {
  const rawInspirations = await loadJson<InspirationType[]>(
    INSPIRATIONS_JSON_PATH
  );
  const thumbnails = await Astro.glob<AstroGlobImageType<"webp">>(
    "/src/assets/images/inspirations/*.webp"
  ).then((files) => files.map((file) => file.default));
  const parsedInspirations = rawInspirations.reduce((acc, inspiration) => {
    try {
      acc.push(
        inspirationSchema.parse({
          ...inspiration,
          thumbnail: thumbnails.find((thumbnail) =>
            thumbnail.src.includes(inspiration.id)
          ),
        })
      );
      return acc;
    } catch (error) {
      console.log(
        "Error parsing inspiration:",
        JSON.stringify(inspiration, null, 2)
      );
      console.log(error);
      return acc;
    }
  }, [] as InspirationType[]);

  return parsedInspirations;
}

export interface Props {
  page: Page;
  allInspirations: InspirationType[];
}

const { page, allInspirations } = Astro.props;
---

<InspirationGrid page={page} allInspirations={allInspirations} />
