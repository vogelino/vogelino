---
import CVLine from '../components/CVLine.astro'
import { aboutFrontmatter } from '../parsedContents/about'

const cv = aboutFrontmatter.cv
---

<div
	id="tab-component"
	class="pt-16 bg-grayUltraLight relative z-10"
	transition:persist
>
	<div role="tablist" aria-label="Curriculum tabbed sections" class="flex">
		<button
			role="tab"
			aria-selected="true"
			aria-controls="work-content"
			id="work"
		>
			Work
		</button>
		<button
			role="tab"
			aria-selected="false"
			aria-controls="teaching-content"
			id="teaching"
		>
			Teaching
		</button>
		<button
			role="tab"
			aria-selected="false"
			aria-controls="education-content"
			id="education"
		>
			Education
		</button>
		<button
			role="tab"
			aria-selected="false"
			aria-controls="internships-content"
			id="internships"
		>
			Internships
		</button>
	</div>
	<section
		id="work-content"
		role="tabpanel"
		aria-labelledby="work"
		tabindex="0"
		class="relative"
	>
		<ul aria-label="Work experience">
			{
				cv.work
					.reverse()
					.map((cvLine) => (
						<CVLine
							title={cvLine.title}
							location={cvLine.location}
							certification={cvLine.certification}
							timePeriod={cvLine.timePeriod}
						/>
					))
			}
		</ul>
	</section>
	<section
		id="education-content"
		role="tabpanel"
		aria-labelledby="education"
		tabindex="0"
		class="hidden"
		aria-hidden="true"
	>
		<ul aria-label="Education">
			{
				cv.education
					.reverse()
					.map((cvLine) => (
						<CVLine
							title={cvLine.title}
							location={cvLine.location}
							certification={cvLine.certification}
							timePeriod={cvLine.timePeriod}
						/>
					))
			}
		</ul>
	</section>
	<section
		id="teaching-content"
		role="tabpanel"
		aria-labelledby="teaching"
		tabindex="0"
		class="hidden"
		aria-hidden="true"
	>
		<ul aria-label="Teaching experience">
			{
				cv.teaching
					.reverse()
					.map((cvLine) => (
						<CVLine
							title={cvLine.title}
							location={cvLine.location}
							certification={cvLine.certification}
							timePeriod={cvLine.timePeriod}
						/>
					))
			}
		</ul>
	</section>
	<section
		id="internships-content"
		role="tabpanel"
		aria-labelledby="internships"
		tabindex="0"
		class="hidden"
		aria-hidden="true"
	>
		<ul aria-label="Internships">
			{
				cv.internships
					.reverse()
					.map((cvLine) => (
						<CVLine
							title={cvLine.title}
							location={cvLine.location}
							certification={cvLine.certification}
							timePeriod={cvLine.timePeriod}
						/>
					))
			}
		</ul>
	</section>
</div>

<style>
	[role='tabpanel'] {
		@apply z-0 -mt-px;
	}

	[role='tab'] {
		@apply transition-colors z-10 text-xl md:text-2xl uppercase;
		@apply tracking-wide px-6 pt-3 pb-2 border -ml-px rounded-t;
		@apply border-transparent border-b-grayMed;
		@apply motion-reduce:transition-none;
	}

	[role='tab'][aria-selected='true'] {
		@apply bg-bg border-grayMed z-20 border-b-bg;
	}

	[role='tab'][aria-selected='false'] {
		@apply bg-grayUltraLight transition-colors;
		@apply hover-hover:hover:bg-alt;
		@apply motion-reduce:transition-none;
	}

	[role='tablist']:focus-visible,
	[role='tabpanel']:focus-visible,
	[role='tab']:focus-visible {
		@apply outline-none ring-inset ring-2 ring-fg z-30 rounded;
	}

	[role='tablist'] {
		@apply max-w-full overflow-x-auto pt-[2px];
	}

	#data-tab-component::after {
		content: '';
		width: 100%;
		height: 1px;
		position: absolute;
		left: 0;
		top: 119px;
		z-index: 20;
		background: linear-gradient(90deg, var(--grayMed) 0%, transparent 10%);
	}

	@media screen and (max-width: 767px) {
		#data-tab-component::after {
			top: 115px;
		}
	}
</style>

<script>
	function setupTabs() {
		const settings = {
			container: '#tab-component',
			trigger: '[role="tab"]',
			content: '[role="tabpanel"]',
		}
		const container = document.querySelector(settings.container)
		if (!container) return

		const tabs = [...document.querySelectorAll(settings.trigger)]
		const contents = [...document.querySelectorAll(settings.content)]

		const toggle = function (tab: HTMLButtonElement, scroll = true) {
			const target = tab.getAttribute('aria-controls')
			const content = document.getElementById(target as string)

			tabs.forEach((t) => {
				t.setAttribute('aria-selected', 'false')
			})
			contents.forEach((c) => {
				c.setAttribute('aria-hidden', 'true')
				c.classList.add('hidden')
			})

			tab.setAttribute('aria-selected', 'true')
			content?.setAttribute('aria-hidden', 'false')
			content?.classList.remove('hidden')

			if (window.innerWidth < 768 && scroll) {
				container.scrollIntoView({ behavior: 'smooth' })
			}
		}

		tabs.forEach((t: HTMLButtonElement) => {
			const onToggle = (evt: MouseEvent | KeyboardEvent) => {
				evt.preventDefault()
				toggle(t)
			}
			t.addEventListener('click', onToggle)
			t.addEventListener('keydown', function (event: KeyboardEvent) {
				if (event.key === 'Enter' || event.key === ' ') onToggle(event)
			})
		})
	}
	setupTabs()
	document.addEventListener('astro:page-load', setupTabs)
	document.addEventListener('astro:after-swap', setupTabs)
</script>
